// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox

// Flexbox display
// flex or inline-flex
.flex-display(@display: flex) {
    display: ~"-webkit-@{display}";
    display: ~"-moz-@{display}";
    display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
    display: ~"-ms-@{display}"; // IE11
    display: @display;
}

// alternativ
.flex-inline-display(@display: inline-flex) {
    display: ~"-webkit-@{display}";
    display: ~"-moz-@{display}";
    display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
    display: ~"-ms-@{display}"; // IE11
    display: @display;
}

// Flex Flow Direction
// > applies to: flex containers
// flex-direction: row | row-reverse | column | column-reverse;
.flex-direction(@direction: row) {
    -webkit-flex-direction: @direction;
    -moz-flex-direction: @direction;
    -ms-flex-direction: @direction;
    flex-direction: @direction;
}

// Flex Line Wrapping
// > applies to: flex containers
// flex-wrap: nowrap | wrap | wrap-reverse;
.flex-wrap(@wrap: nowrap) {
    -webkit-flex-wrap: @wrap;
    -moz-flex-wrap:  @wrap;
    -ms-flex-wrap: @wrap;
    flex-wrap:  @wrap;
}

// Flex Flow values: This is the shorthand for:
// Flex Direction and Flex Wrap
// > applies to: flex containers
// flex-flow: <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
    -webkit-flex-flow: @flow;
    -moz-flex-flow: @flow;
    -ms-flex-flow: @flow;
    flex-flow: @flow;
}

// Display Order
// > applies to: flex items
// order value: <integer> = reihenfolge der kind-objekte
.flex-order(@order) {
	// todo welche zÃ¤hlen noch?
    -webkit-box-ordinal-group: @order;
    -moz-box-ordinal-group: @order;
    -ms-flex-order: @order;
    //
    -webkit-order: @order;
    -moz-order: @order;
	-ms-order: @order;
	order: @order;
}

// Flex grow factor
// > applies to: flex items
// grow value: <number>
.flex-grow(@grow: 0) {
    -webkit-flex-grow: @grow;
    -moz-flex-grow: @grow;
    -ms-flex-grow: @grow;
    flex-grow: @grow;
}

// Flex shrink factor
// > applies to: flex itemsink factor
// value: <number>
.flex-shrink(@shrink: 1) {
    -webkit-flex-shrink: @shrink;
    -moz-flex-shrink: @shrink;
    -ms-flex-shrink: @shrink;
    flex-shrink: @shrink;
}

// Flex basis
// > the initial main size of the flex item
// > applies to: flex items initial main size of the flex item
// value: <width>
.flex-basis(@width: auto) {
    -webkit-flex-basis: @width;
    -moz-flex-basis: @width;
    -ms-flex-basis: @width;
    flex-basis: @width;
}

// flex values: This is the shorthand for:
// flex-grow, flex-shrink and flex-basis - combined.
// The second and third parameters (flex-shrink and flex-basis) are optional.
// Default is 0 1 auto.
// > applies to: flex items
// value: <positive-number>, initial, auto, or none
.flex(@columns: initial) {
    -webkit-flex: @columns;
    -moz-flex: @columns;
    -ms-flex: @columns;
    flex: @columns;
}

// Axis Alignment
// > applies to: flex containers
// justify-content: flex-start | flex-end | center | space-between | space-around;
.justify-content(@justify: flex-start) {
    -webkit-justify-content: @justify;
    -moz-justify-content: @justify;
    -ms-justify-content: @justify;
    justify-content: @justify;
}

// Packing Flex Lines
// > applies to: multi-line flex containers
// align-content: flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
    -webkit-align-content: @align;
    -moz-align-content: @align;
    -ms-align-content: @align;
    align-content: @align;
}

// Cross-axis Alignment
// > applies to: flex containers
// align-items: flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
    -webkit-align-items: @align;
    -moz-align-items: @align;
    -ms-align-items: @align;
    align-items: @align;
}

// Cross-axis Alignment
// > applies to: flex items
// align-self: auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
    -webkit-align-self: @align;
    -moz-align-self: @align;
    -ms-align-self: @align;
    align-self: @align;
}